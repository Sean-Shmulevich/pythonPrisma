# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    posts: 'PostCreateManyNestedWithoutRelationsInput'
    profile: 'ProfileCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str
    name: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    password: _str
    name: _str
    posts: 'PostUpdateManyWithoutRelationsInput'
    profile: 'ProfileUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    password: _str
    name: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_name_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    posts: Union[bool, 'FindManyPostArgsFromUser']
    profile: Union[bool, 'FindManyProfileArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']
    profile: Union[bool, 'FindManyProfileArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']
    profile: Union[bool, 'FindManyProfileArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive3']
    profile: Union[bool, 'FindManyProfileArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive4']
    profile: Union[bool, 'FindManyProfileArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class ProfileIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class ProfileIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class ProfileIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class ProfileIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class ProfileIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    
    

class PostIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive1']
    thread: Union[bool, 'ThreadArgsFromUserRecursive1']


class PostIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive2']
    thread: Union[bool, 'ThreadArgsFromUserRecursive2']


class PostIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive3']
    thread: Union[bool, 'ThreadArgsFromUserRecursive3']


class PostIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive4']
    thread: Union[bool, 'ThreadArgsFromUserRecursive4']


class PostIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class ThreadIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']


class ThreadIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']


class ThreadIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive3']


class ThreadIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive4']


class ThreadIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ThreadArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ThreadIncludeFromThreadRecursive1'


class ThreadArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ThreadIncludeFromThreadRecursive2'


class ThreadArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ThreadIncludeFromThreadRecursive3'


class ThreadArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ThreadIncludeFromThreadRecursive4'


class ThreadArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyThreadArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive1'


class FindManyThreadArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive2'


class FindManyThreadArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive3'


class FindManyThreadArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive4'


class FindManyThreadArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    password: _str
    name: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    password: _str
    name: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    password: bool
    name: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    password: bool
    name: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'password': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'password': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'posts',
    'profile',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'password',
    'name',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'posts',
        'profile',
    ]

# Profile types

class ProfileOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Profile create method"""
    id: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _str


class ProfileCreateInput(ProfileOptionalCreateInput):
    """Required arguments to the Profile create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProfileOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Profile create method, without relations"""
    id: _str
    userId: _str


class ProfileCreateWithoutRelationsInput(ProfileOptionalCreateWithoutRelationsInput):
    """Required arguments to the Profile create method, without relations"""


class ProfileCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'


class ProfileCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProfileCreateWithoutRelationsInput', List['ProfileCreateWithoutRelationsInput']]
    connect: Union['ProfileWhereUniqueInput', List['ProfileWhereUniqueInput']]


_ProfileWhereUnique_id_Input = TypedDict(
    '_ProfileWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ProfileWhereUnique_userId_Input = TypedDict(
    '_ProfileWhereUnique_userId_Input',
    {
        'userId': '_str',
    },
    total=True
)

ProfileWhereUniqueInput = Union[
    '_ProfileWhereUnique_id_Input',
    '_ProfileWhereUnique_userId_Input',
]


class ProfileUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    user: 'UserUpdateOneWithoutRelationsInput'


class ProfileUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str


class ProfileUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProfileCreateWithoutRelationsInput']
    connect: List['ProfileWhereUniqueInput']
    set: List['ProfileWhereUniqueInput']
    disconnect: List['ProfileWhereUniqueInput']
    delete: List['ProfileWhereUniqueInput']

    # TODO
    # update: List['ProfileUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProfileUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProfileScalarWhereInput']
    # upsert: List['ProfileUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ProfileCreateOrConnectWithoutRelationsInput']


class ProfileUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProfileUpdateInput'
    # upsert: 'ProfileUpsertWithoutRelationsInput'
    # connectOrCreate: 'ProfileCreateOrConnectWithoutRelationsInput'


class ProfileUpsertInput(TypedDict):
    create: 'ProfileCreateInput'
    update: 'ProfileUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Profile_id_OrderByInput = TypedDict(
    '_Profile_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Profile_userId_OrderByInput = TypedDict(
    '_Profile_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

ProfileOrderByInput = Union[
    '_Profile_id_OrderByInput',
    '_Profile_userId_OrderByInput',
]



# recursive Profile types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProfileRelationFilter = TypedDict(
    'ProfileRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProfileListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProfileInclude(TypedDict, total=False):
    """Profile relational arguments"""
    user: Union[bool, 'UserArgsFromProfile']


    

class UserIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive1']
    profile: Union[bool, 'FindManyProfileArgsFromProfileRecursive1']


class UserIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive2']
    profile: Union[bool, 'FindManyProfileArgsFromProfileRecursive2']


class UserIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive3']
    profile: Union[bool, 'FindManyProfileArgsFromProfileRecursive3']


class UserIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive4']
    profile: Union[bool, 'FindManyProfileArgsFromProfileRecursive4']


class UserIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class UserArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyUserArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class ProfileIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive1']


class ProfileIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive2']


class ProfileIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive3']


class ProfileIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive4']


class ProfileIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class ProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    
    

class PostIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive1']
    thread: Union[bool, 'ThreadArgsFromProfileRecursive1']


class PostIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive2']
    thread: Union[bool, 'ThreadArgsFromProfileRecursive2']


class PostIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive3']
    thread: Union[bool, 'ThreadArgsFromProfileRecursive3']


class PostIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive4']
    thread: Union[bool, 'ThreadArgsFromProfileRecursive4']


class PostIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class PostArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyPostArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class ThreadIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive1']


class ThreadIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive2']


class ThreadIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive3']


class ThreadIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive4']


class ThreadIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class ThreadArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ThreadIncludeFromThreadRecursive1'


class ThreadArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ThreadIncludeFromThreadRecursive2'


class ThreadArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ThreadIncludeFromThreadRecursive3'


class ThreadArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ThreadIncludeFromThreadRecursive4'


class ThreadArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyThreadArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive1'


class FindManyThreadArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive2'


class FindManyThreadArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive3'


class FindManyThreadArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive4'


class FindManyThreadArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    


FindManyProfileArgs = FindManyProfileArgsFromProfile
FindFirstProfileArgs = FindManyProfileArgsFromProfile


    

class ProfileWhereInput(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive1', List['ProfileWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive1']
    OR: List['ProfileWhereInputRecursive1']
    NOT: List['ProfileWhereInputRecursive1']


class ProfileWhereInputRecursive1(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive2', List['ProfileWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive2']
    OR: List['ProfileWhereInputRecursive2']
    NOT: List['ProfileWhereInputRecursive2']


class ProfileWhereInputRecursive2(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive3', List['ProfileWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive3']
    OR: List['ProfileWhereInputRecursive3']
    NOT: List['ProfileWhereInputRecursive3']


class ProfileWhereInputRecursive3(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive4', List['ProfileWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive4']
    OR: List['ProfileWhereInputRecursive4']
    NOT: List['ProfileWhereInputRecursive4']


class ProfileWhereInputRecursive4(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']



# aggregate Profile types


    

class ProfileScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive1']


class ProfileScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive2']


class ProfileScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive3']


class ProfileScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive4']


class ProfileScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class ProfileGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    _sum: 'ProfileSumAggregateOutput'
    _avg: 'ProfileAvgAggregateOutput'
    _min: 'ProfileMinAggregateOutput'
    _max: 'ProfileMaxAggregateOutput'
    _count: 'ProfileCountAggregateOutput'


class ProfileAvgAggregateOutput(TypedDict, total=False):
    """Profile output for aggregating averages"""


class ProfileSumAggregateOutput(TypedDict, total=False):
    """Profile output for aggregating sums"""


class ProfileScalarAggregateOutput(TypedDict, total=False):
    """Profile output including scalar fields"""
    id: _str
    userId: _str


ProfileMinAggregateOutput = ProfileScalarAggregateOutput
ProfileMaxAggregateOutput = ProfileScalarAggregateOutput


class ProfileMaxAggregateInput(TypedDict, total=False):
    """Profile input for aggregating by max"""
    id: bool
    userId: bool


class ProfileMinAggregateInput(TypedDict, total=False):
    """Profile input for aggregating by min"""
    id: bool
    userId: bool


class ProfileNumberAggregateInput(TypedDict, total=False):
    """Profile input for aggregating numbers"""


ProfileAvgAggregateInput = ProfileNumberAggregateInput
ProfileSumAggregateInput = ProfileNumberAggregateInput


ProfileCountAggregateInput = TypedDict(
    'ProfileCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

ProfileCountAggregateOutput = TypedDict(
    'ProfileCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


ProfileKeys = Literal[
    'id',
    'user',
    'userId',
]
ProfileScalarFieldKeys = Literal[
    'id',
    'userId',
]
ProfileScalarFieldKeysT = TypeVar('ProfileScalarFieldKeysT', bound=ProfileScalarFieldKeys)

ProfileRelationalFieldKeys = Literal[
        'user',
    ]

# Post types

class PostOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Post create method"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    author: 'UserCreateNestedWithoutRelationsInput'
    authorId: _str
    thread: 'ThreadCreateNestedWithoutRelationsInput'
    threadId: _str


class PostCreateInput(PostOptionalCreateInput):
    """Required arguments to the Post create method"""
    imageUrl: _str
    conversation: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PostOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Post create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    authorId: _str
    threadId: _str


class PostCreateWithoutRelationsInput(PostOptionalCreateWithoutRelationsInput):
    """Required arguments to the Post create method, without relations"""
    imageUrl: _str
    conversation: _str


class PostCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'


class PostCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PostCreateWithoutRelationsInput', List['PostCreateWithoutRelationsInput']]
    connect: Union['PostWhereUniqueInput', List['PostWhereUniqueInput']]


_PostWhereUnique_id_Input = TypedDict(
    '_PostWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PostWhereUnique_authorId_Input = TypedDict(
    '_PostWhereUnique_authorId_Input',
    {
        'authorId': '_str',
    },
    total=True
)

_PostWhereUnique_threadId_Input = TypedDict(
    '_PostWhereUnique_threadId_Input',
    {
        'threadId': '_str',
    },
    total=True
)

PostWhereUniqueInput = Union[
    '_PostWhereUnique_id_Input',
    '_PostWhereUnique_authorId_Input',
    '_PostWhereUnique_threadId_Input',
]


class PostUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    imageUrl: _str
    conversation: _str
    author: 'UserUpdateOneWithoutRelationsInput'
    thread: 'ThreadUpdateOneWithoutRelationsInput'


class PostUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    imageUrl: _str
    conversation: _str


class PostUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PostCreateWithoutRelationsInput']
    connect: List['PostWhereUniqueInput']
    set: List['PostWhereUniqueInput']
    disconnect: List['PostWhereUniqueInput']
    delete: List['PostWhereUniqueInput']

    # TODO
    # update: List['PostUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PostUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PostScalarWhereInput']
    # upsert: List['PostUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PostCreateOrConnectWithoutRelationsInput']


class PostUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PostUpdateInput'
    # upsert: 'PostUpsertWithoutRelationsInput'
    # connectOrCreate: 'PostCreateOrConnectWithoutRelationsInput'


class PostUpsertInput(TypedDict):
    create: 'PostCreateInput'
    update: 'PostUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Post_id_OrderByInput = TypedDict(
    '_Post_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Post_createdAt_OrderByInput = TypedDict(
    '_Post_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Post_updatedAt_OrderByInput = TypedDict(
    '_Post_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Post_imageUrl_OrderByInput = TypedDict(
    '_Post_imageUrl_OrderByInput',
    {
        'imageUrl': 'SortOrder',
    },
    total=True
)

_Post_conversation_OrderByInput = TypedDict(
    '_Post_conversation_OrderByInput',
    {
        'conversation': 'SortOrder',
    },
    total=True
)

_Post_authorId_OrderByInput = TypedDict(
    '_Post_authorId_OrderByInput',
    {
        'authorId': 'SortOrder',
    },
    total=True
)

_Post_threadId_OrderByInput = TypedDict(
    '_Post_threadId_OrderByInput',
    {
        'threadId': 'SortOrder',
    },
    total=True
)

PostOrderByInput = Union[
    '_Post_id_OrderByInput',
    '_Post_createdAt_OrderByInput',
    '_Post_updatedAt_OrderByInput',
    '_Post_imageUrl_OrderByInput',
    '_Post_conversation_OrderByInput',
    '_Post_authorId_OrderByInput',
    '_Post_threadId_OrderByInput',
]



# recursive Post types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PostRelationFilter = TypedDict(
    'PostRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PostListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PostInclude(TypedDict, total=False):
    """Post relational arguments"""
    author: Union[bool, 'UserArgsFromPost']
    thread: Union[bool, 'ThreadArgsFromPost']


    

class UserIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']
    profile: Union[bool, 'FindManyProfileArgsFromPostRecursive1']


class UserIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']
    profile: Union[bool, 'FindManyProfileArgsFromPostRecursive2']


class UserIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive3']
    profile: Union[bool, 'FindManyProfileArgsFromPostRecursive3']


class UserIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive4']
    profile: Union[bool, 'FindManyProfileArgsFromPostRecursive4']


class UserIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class UserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyUserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class ProfileIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive1']


class ProfileIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive2']


class ProfileIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive3']


class ProfileIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive4']


class ProfileIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class ProfileArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyProfileArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    
    

class PostIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive1']
    thread: Union[bool, 'ThreadArgsFromPostRecursive1']


class PostIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive2']
    thread: Union[bool, 'ThreadArgsFromPostRecursive2']


class PostIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive3']
    thread: Union[bool, 'ThreadArgsFromPostRecursive3']


class PostIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive4']
    thread: Union[bool, 'ThreadArgsFromPostRecursive4']


class PostIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class ThreadIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']


class ThreadIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']


class ThreadIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive3']


class ThreadIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive4']


class ThreadIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class ThreadArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ThreadIncludeFromThreadRecursive1'


class ThreadArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ThreadIncludeFromThreadRecursive2'


class ThreadArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ThreadIncludeFromThreadRecursive3'


class ThreadArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ThreadIncludeFromThreadRecursive4'


class ThreadArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyThreadArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive1'


class FindManyThreadArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive2'


class FindManyThreadArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive3'


class FindManyThreadArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive4'


class FindManyThreadArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    


FindManyPostArgs = FindManyPostArgsFromPost
FindFirstPostArgs = FindManyPostArgsFromPost


    

class PostWhereInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    imageUrl: Union[_str, 'types.StringFilter']
    conversation: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    thread: 'ThreadRelationFilter'
    threadId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive1', List['PostWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive1']
    OR: List['PostWhereInputRecursive1']
    NOT: List['PostWhereInputRecursive1']


class PostWhereInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    imageUrl: Union[_str, 'types.StringFilter']
    conversation: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    thread: 'ThreadRelationFilter'
    threadId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive2', List['PostWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive2']
    OR: List['PostWhereInputRecursive2']
    NOT: List['PostWhereInputRecursive2']


class PostWhereInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    imageUrl: Union[_str, 'types.StringFilter']
    conversation: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    thread: 'ThreadRelationFilter'
    threadId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive3', List['PostWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive3']
    OR: List['PostWhereInputRecursive3']
    NOT: List['PostWhereInputRecursive3']


class PostWhereInputRecursive3(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    imageUrl: Union[_str, 'types.StringFilter']
    conversation: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    thread: 'ThreadRelationFilter'
    threadId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive4', List['PostWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive4']
    OR: List['PostWhereInputRecursive4']
    NOT: List['PostWhereInputRecursive4']


class PostWhereInputRecursive4(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    imageUrl: Union[_str, 'types.StringFilter']
    conversation: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    thread: 'ThreadRelationFilter'
    threadId: Union[_str, 'types.StringFilter']



# aggregate Post types


    

class PostScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    conversation: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    threadId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive1']
    OR: List['PostScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive1']


class PostScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    conversation: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    threadId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive2']
    OR: List['PostScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive2']


class PostScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    conversation: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    threadId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive3']
    OR: List['PostScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive3']


class PostScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    conversation: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    threadId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive4']
    OR: List['PostScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive4']


class PostScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    conversation: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    threadId: Union[_str, 'types.StringWithAggregatesFilter']



class PostGroupByOutput(TypedDict, total=False):
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    imageUrl: _str
    conversation: _str
    authorId: _str
    threadId: _str
    _sum: 'PostSumAggregateOutput'
    _avg: 'PostAvgAggregateOutput'
    _min: 'PostMinAggregateOutput'
    _max: 'PostMaxAggregateOutput'
    _count: 'PostCountAggregateOutput'


class PostAvgAggregateOutput(TypedDict, total=False):
    """Post output for aggregating averages"""


class PostSumAggregateOutput(TypedDict, total=False):
    """Post output for aggregating sums"""


class PostScalarAggregateOutput(TypedDict, total=False):
    """Post output including scalar fields"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    imageUrl: _str
    conversation: _str
    authorId: _str
    threadId: _str


PostMinAggregateOutput = PostScalarAggregateOutput
PostMaxAggregateOutput = PostScalarAggregateOutput


class PostMaxAggregateInput(TypedDict, total=False):
    """Post input for aggregating by max"""
    id: bool
    createdAt: bool
    updatedAt: bool
    imageUrl: bool
    conversation: bool
    authorId: bool
    threadId: bool


class PostMinAggregateInput(TypedDict, total=False):
    """Post input for aggregating by min"""
    id: bool
    createdAt: bool
    updatedAt: bool
    imageUrl: bool
    conversation: bool
    authorId: bool
    threadId: bool


class PostNumberAggregateInput(TypedDict, total=False):
    """Post input for aggregating numbers"""


PostAvgAggregateInput = PostNumberAggregateInput
PostSumAggregateInput = PostNumberAggregateInput


PostCountAggregateInput = TypedDict(
    'PostCountAggregateInput',
    {
        'id': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'imageUrl': bool,
        'conversation': bool,
        'authorId': bool,
        'threadId': bool,
        '_all': bool,
    },
    total=False,
)

PostCountAggregateOutput = TypedDict(
    'PostCountAggregateOutput',
    {
        'id': int,
        'createdAt': int,
        'updatedAt': int,
        'imageUrl': int,
        'conversation': int,
        'authorId': int,
        'threadId': int,
        '_all': int,
    },
    total=False,
)


PostKeys = Literal[
    'id',
    'createdAt',
    'updatedAt',
    'imageUrl',
    'conversation',
    'author',
    'authorId',
    'thread',
    'threadId',
]
PostScalarFieldKeys = Literal[
    'id',
    'createdAt',
    'updatedAt',
    'imageUrl',
    'conversation',
    'authorId',
    'threadId',
]
PostScalarFieldKeysT = TypeVar('PostScalarFieldKeysT', bound=PostScalarFieldKeys)

PostRelationalFieldKeys = Literal[
        'author',
        'thread',
    ]

# Thread types

class ThreadOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Thread create method"""
    id: _str
    posts: 'PostCreateManyNestedWithoutRelationsInput'


class ThreadCreateInput(ThreadOptionalCreateInput):
    """Required arguments to the Thread create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ThreadOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Thread create method, without relations"""
    id: _str


class ThreadCreateWithoutRelationsInput(ThreadOptionalCreateWithoutRelationsInput):
    """Required arguments to the Thread create method, without relations"""


class ThreadCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ThreadCreateWithoutRelationsInput'
    connect: 'ThreadWhereUniqueInput'


class ThreadCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ThreadCreateWithoutRelationsInput', List['ThreadCreateWithoutRelationsInput']]
    connect: Union['ThreadWhereUniqueInput', List['ThreadWhereUniqueInput']]


_ThreadWhereUnique_id_Input = TypedDict(
    '_ThreadWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ThreadWhereUniqueInput = _ThreadWhereUnique_id_Input


class ThreadUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    posts: 'PostUpdateManyWithoutRelationsInput'


class ThreadUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str


class ThreadUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ThreadCreateWithoutRelationsInput']
    connect: List['ThreadWhereUniqueInput']
    set: List['ThreadWhereUniqueInput']
    disconnect: List['ThreadWhereUniqueInput']
    delete: List['ThreadWhereUniqueInput']

    # TODO
    # update: List['ThreadUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ThreadUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ThreadScalarWhereInput']
    # upsert: List['ThreadUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ThreadCreateOrConnectWithoutRelationsInput']


class ThreadUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ThreadCreateWithoutRelationsInput'
    connect: 'ThreadWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ThreadUpdateInput'
    # upsert: 'ThreadUpsertWithoutRelationsInput'
    # connectOrCreate: 'ThreadCreateOrConnectWithoutRelationsInput'


class ThreadUpsertInput(TypedDict):
    create: 'ThreadCreateInput'
    update: 'ThreadUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Thread_id_OrderByInput = TypedDict(
    '_Thread_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

ThreadOrderByInput = _Thread_id_OrderByInput



# recursive Thread types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ThreadRelationFilter = TypedDict(
    'ThreadRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ThreadListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ThreadInclude(TypedDict, total=False):
    """Thread relational arguments"""
    posts: Union[bool, 'FindManyPostArgsFromThread']


    

class UserIncludeFromThread(TypedDict, total=False):
    """Relational arguments for Thread"""
    posts: Union[bool, 'FindManyPostArgsFromThreadRecursive1']
    profile: Union[bool, 'FindManyProfileArgsFromThreadRecursive1']


class UserIncludeFromThreadRecursive1(TypedDict, total=False):
    """Relational arguments for Thread"""
    posts: Union[bool, 'FindManyPostArgsFromThreadRecursive2']
    profile: Union[bool, 'FindManyProfileArgsFromThreadRecursive2']


class UserIncludeFromThreadRecursive2(TypedDict, total=False):
    """Relational arguments for Thread"""
    posts: Union[bool, 'FindManyPostArgsFromThreadRecursive3']
    profile: Union[bool, 'FindManyProfileArgsFromThreadRecursive3']


class UserIncludeFromThreadRecursive3(TypedDict, total=False):
    """Relational arguments for Thread"""
    posts: Union[bool, 'FindManyPostArgsFromThreadRecursive4']
    profile: Union[bool, 'FindManyProfileArgsFromThreadRecursive4']


class UserIncludeFromThreadRecursive4(TypedDict, total=False):
    """Relational arguments for Thread"""

    

class UserArgsFromThread(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromThreadRecursive1(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromThreadRecursive2(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromThreadRecursive3(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromThreadRecursive4(TypedDict, total=False):
    """Arguments for Thread"""
    
    

class FindManyUserArgsFromThread(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromThreadRecursive1(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromThreadRecursive2(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromThreadRecursive3(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromThreadRecursive4(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class ProfileIncludeFromThread(TypedDict, total=False):
    """Relational arguments for Thread"""
    user: Union[bool, 'UserArgsFromThreadRecursive1']


class ProfileIncludeFromThreadRecursive1(TypedDict, total=False):
    """Relational arguments for Thread"""
    user: Union[bool, 'UserArgsFromThreadRecursive2']


class ProfileIncludeFromThreadRecursive2(TypedDict, total=False):
    """Relational arguments for Thread"""
    user: Union[bool, 'UserArgsFromThreadRecursive3']


class ProfileIncludeFromThreadRecursive3(TypedDict, total=False):
    """Relational arguments for Thread"""
    user: Union[bool, 'UserArgsFromThreadRecursive4']


class ProfileIncludeFromThreadRecursive4(TypedDict, total=False):
    """Relational arguments for Thread"""

    

class ProfileArgsFromThread(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromThreadRecursive1(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromThreadRecursive2(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromThreadRecursive3(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromThreadRecursive4(TypedDict, total=False):
    """Arguments for Thread"""
    
    

class FindManyProfileArgsFromThread(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromThreadRecursive1(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromThreadRecursive2(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromThreadRecursive3(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromThreadRecursive4(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    
    

class PostIncludeFromThread(TypedDict, total=False):
    """Relational arguments for Thread"""
    author: Union[bool, 'UserArgsFromThreadRecursive1']
    thread: Union[bool, 'ThreadArgsFromThreadRecursive1']


class PostIncludeFromThreadRecursive1(TypedDict, total=False):
    """Relational arguments for Thread"""
    author: Union[bool, 'UserArgsFromThreadRecursive2']
    thread: Union[bool, 'ThreadArgsFromThreadRecursive2']


class PostIncludeFromThreadRecursive2(TypedDict, total=False):
    """Relational arguments for Thread"""
    author: Union[bool, 'UserArgsFromThreadRecursive3']
    thread: Union[bool, 'ThreadArgsFromThreadRecursive3']


class PostIncludeFromThreadRecursive3(TypedDict, total=False):
    """Relational arguments for Thread"""
    author: Union[bool, 'UserArgsFromThreadRecursive4']
    thread: Union[bool, 'ThreadArgsFromThreadRecursive4']


class PostIncludeFromThreadRecursive4(TypedDict, total=False):
    """Relational arguments for Thread"""

    

class PostArgsFromThread(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromThreadRecursive1(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromThreadRecursive2(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromThreadRecursive3(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromThreadRecursive4(TypedDict, total=False):
    """Arguments for Thread"""
    
    

class FindManyPostArgsFromThread(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromThreadRecursive1(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromThreadRecursive2(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromThreadRecursive3(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromThreadRecursive4(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class ThreadIncludeFromThread(TypedDict, total=False):
    """Relational arguments for Thread"""
    posts: Union[bool, 'FindManyPostArgsFromThreadRecursive1']


class ThreadIncludeFromThreadRecursive1(TypedDict, total=False):
    """Relational arguments for Thread"""
    posts: Union[bool, 'FindManyPostArgsFromThreadRecursive2']


class ThreadIncludeFromThreadRecursive2(TypedDict, total=False):
    """Relational arguments for Thread"""
    posts: Union[bool, 'FindManyPostArgsFromThreadRecursive3']


class ThreadIncludeFromThreadRecursive3(TypedDict, total=False):
    """Relational arguments for Thread"""
    posts: Union[bool, 'FindManyPostArgsFromThreadRecursive4']


class ThreadIncludeFromThreadRecursive4(TypedDict, total=False):
    """Relational arguments for Thread"""

    

class ThreadArgsFromThread(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'ThreadIncludeFromThreadRecursive1'


class ThreadArgsFromThreadRecursive1(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'ThreadIncludeFromThreadRecursive2'


class ThreadArgsFromThreadRecursive2(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'ThreadIncludeFromThreadRecursive3'


class ThreadArgsFromThreadRecursive3(TypedDict, total=False):
    """Arguments for Thread"""
    include: 'ThreadIncludeFromThreadRecursive4'


class ThreadArgsFromThreadRecursive4(TypedDict, total=False):
    """Arguments for Thread"""
    
    

class FindManyThreadArgsFromThread(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive1'


class FindManyThreadArgsFromThreadRecursive1(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive2'


class FindManyThreadArgsFromThreadRecursive2(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive3'


class FindManyThreadArgsFromThreadRecursive3(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    include: 'ThreadIncludeFromThreadRecursive4'


class FindManyThreadArgsFromThreadRecursive4(TypedDict, total=False):
    """Arguments for Thread"""
    take: int
    skip: int
    order_by: Union['ThreadOrderByInput', List['ThreadOrderByInput']]
    where: 'ThreadWhereInput'
    cursor: 'ThreadWhereUniqueInput'
    


FindManyThreadArgs = FindManyThreadArgsFromThread
FindFirstThreadArgs = FindManyThreadArgsFromThread


    

class ThreadWhereInput(TypedDict, total=False):
    """Thread arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'

    # should be noted that AND and NOT should be Union['ThreadWhereInputRecursive1', List['ThreadWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ThreadWhereInputRecursive1']
    OR: List['ThreadWhereInputRecursive1']
    NOT: List['ThreadWhereInputRecursive1']


class ThreadWhereInputRecursive1(TypedDict, total=False):
    """Thread arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'

    # should be noted that AND and NOT should be Union['ThreadWhereInputRecursive2', List['ThreadWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ThreadWhereInputRecursive2']
    OR: List['ThreadWhereInputRecursive2']
    NOT: List['ThreadWhereInputRecursive2']


class ThreadWhereInputRecursive2(TypedDict, total=False):
    """Thread arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'

    # should be noted that AND and NOT should be Union['ThreadWhereInputRecursive3', List['ThreadWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ThreadWhereInputRecursive3']
    OR: List['ThreadWhereInputRecursive3']
    NOT: List['ThreadWhereInputRecursive3']


class ThreadWhereInputRecursive3(TypedDict, total=False):
    """Thread arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'

    # should be noted that AND and NOT should be Union['ThreadWhereInputRecursive4', List['ThreadWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ThreadWhereInputRecursive4']
    OR: List['ThreadWhereInputRecursive4']
    NOT: List['ThreadWhereInputRecursive4']


class ThreadWhereInputRecursive4(TypedDict, total=False):
    """Thread arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'



# aggregate Thread types


    

class ThreadScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Thread arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ThreadScalarWhereWithAggregatesInputRecursive1']
    OR: List['ThreadScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ThreadScalarWhereWithAggregatesInputRecursive1']


class ThreadScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Thread arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ThreadScalarWhereWithAggregatesInputRecursive2']
    OR: List['ThreadScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ThreadScalarWhereWithAggregatesInputRecursive2']


class ThreadScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Thread arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ThreadScalarWhereWithAggregatesInputRecursive3']
    OR: List['ThreadScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ThreadScalarWhereWithAggregatesInputRecursive3']


class ThreadScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Thread arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ThreadScalarWhereWithAggregatesInputRecursive4']
    OR: List['ThreadScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ThreadScalarWhereWithAggregatesInputRecursive4']


class ThreadScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Thread arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']



class ThreadGroupByOutput(TypedDict, total=False):
    id: _str
    _sum: 'ThreadSumAggregateOutput'
    _avg: 'ThreadAvgAggregateOutput'
    _min: 'ThreadMinAggregateOutput'
    _max: 'ThreadMaxAggregateOutput'
    _count: 'ThreadCountAggregateOutput'


class ThreadAvgAggregateOutput(TypedDict, total=False):
    """Thread output for aggregating averages"""


class ThreadSumAggregateOutput(TypedDict, total=False):
    """Thread output for aggregating sums"""


class ThreadScalarAggregateOutput(TypedDict, total=False):
    """Thread output including scalar fields"""
    id: _str


ThreadMinAggregateOutput = ThreadScalarAggregateOutput
ThreadMaxAggregateOutput = ThreadScalarAggregateOutput


class ThreadMaxAggregateInput(TypedDict, total=False):
    """Thread input for aggregating by max"""
    id: bool


class ThreadMinAggregateInput(TypedDict, total=False):
    """Thread input for aggregating by min"""
    id: bool


class ThreadNumberAggregateInput(TypedDict, total=False):
    """Thread input for aggregating numbers"""


ThreadAvgAggregateInput = ThreadNumberAggregateInput
ThreadSumAggregateInput = ThreadNumberAggregateInput


ThreadCountAggregateInput = TypedDict(
    'ThreadCountAggregateInput',
    {
        'id': bool,
        '_all': bool,
    },
    total=False,
)

ThreadCountAggregateOutput = TypedDict(
    'ThreadCountAggregateOutput',
    {
        'id': int,
        '_all': int,
    },
    total=False,
)


ThreadKeys = Literal[
    'id',
    'posts',
]
ThreadScalarFieldKeys = Literal[
    'id',
]
ThreadScalarFieldKeysT = TypeVar('ThreadScalarFieldKeysT', bound=ThreadScalarFieldKeys)

ThreadRelationalFieldKeys = Literal[
        'posts',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields